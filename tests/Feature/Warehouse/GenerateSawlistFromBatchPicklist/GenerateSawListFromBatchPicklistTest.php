<?php

namespace Tests\Feature\Warehouse\GenerateSawlistFromBatchPicklist;

use App\Warehouse\Domain\BatchPicklists\BatchPicklist;
use App\Warehouse\Domain\Orders\OrderedItemFactory;
use App\Warehouse\Domain\Repositories\BatchPicklistRepositoryInterface;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryCollectionBatchPicklistRepository;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Laravel\Passport\Passport;
use Tests\TestCase;

class GenerateSawListFromBatchPicklistTest extends TestCase
{
    use DatabaseMigrations;

    protected InMemoryCollectionBatchPicklistRepository $batchPicklistRepository;
    protected \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->batchPicklistRepository = new InMemoryCollectionBatchPicklistRepository();
        $this->app->bind(BatchPicklistRepositoryInterface::class, function () {return $this->batchPicklistRepository;});
        $this->user = \App\User::factory()->create();
        Passport::actingAs($this->user);
    }

    /** @test */
    public function it_should_download_saw_list()
    {
        // Given
        $orderedItems = OrderedItemFactory::createRails(5);

        $batchPicklist = new BatchPicklist($orderedItems);
        $batchPicklistId = 123;
        $batchPicklist->setIdentity($batchPicklistId);
        $this->batchPicklistRepository->addOne($batchPicklist);
        $url = route('generate-saw-list-from-batch-picklist', $batchPicklistId);

        // When
        $response = $this->get($url);

        // Then
        $response->assertOk();
        $response->assertDownload('zaaglijst_' . $batchPicklistId . '.pdf');
    }
}
